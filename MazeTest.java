/*
 * Test Class for maze
 *
 * @author Jose Polanco
 * Advanced Java COMPSCI 221-02
 */

/* OUTPUTS

Enter number of rows and columns: 
11 11
1 1 1 1 1 1 1 1 1 1 1 
1 p p p p p 1 0 0 0 1 
1 p 1 p p p 1 0 1 0 1 
e p 1 p p p p p 1 0 1 
1 0 1 1 1 1 1 p 1 0 1 
1 0 1 0 1 p p p 1 0 1 
1 0 0 0 1 p 1 0 0 0 1 
1 1 1 1 1 p 1 0 0 0 1 
1 0 1 b 1 p 1 0 0 0 1 
1 0 0 p p p 1 0 0 0 1 
1 1 1 1 1 1 1 1 1 1 1 

1 1 1 1 1 1 1 1 1 1 1 
1 p p p p p 1 0 0 0 1 
1 p 1 p p p 1 0 1 0 1 
e p 1 0 0 p p p 1 0 1 
1 0 1 1 1 1 1 p 1 0 1 
1 0 1 0 1 p p p 1 0 1 
1 0 0 0 1 p 1 0 0 0 1 
1 1 1 1 1 p 1 0 0 0 1 
1 0 1 b 1 p 1 0 0 0 1 
1 0 0 p p p 1 0 0 0 1 
1 1 1 1 1 1 1 1 1 1 1 

1 1 1 1 1 1 1 1 1 1 1 
1 p p p p p 1 0 0 0 1 
1 p 1 0 0 p 1 0 1 0 1 
e p 1 0 0 p p p 1 0 1 
1 0 1 1 1 1 1 p 1 0 1 
1 0 1 0 1 p p p 1 0 1 
1 0 0 0 1 p 1 0 0 0 1 
1 1 1 1 1 p 1 0 0 0 1 
1 0 1 b 1 p 1 0 0 0 1 
1 0 0 p p p 1 0 0 0 1 
1 1 1 1 1 1 1 1 1 1 1 

1 1 1 1 1 1 1 1 1 1 1 
1 p p p p 0 1 0 0 0 1 
1 p 1 0 p p 1 0 1 0 1 
e p 1 0 0 p p p 1 0 1 
1 0 1 1 1 1 1 p 1 0 1 
1 0 1 0 1 p p p 1 0 1 
1 0 0 0 1 p 1 0 0 0 1 
1 1 1 1 1 p 1 0 0 0 1 
1 0 1 b 1 p 1 0 0 0 1 
1 0 0 p p p 1 0 0 0 1 
1 1 1 1 1 1 1 1 1 1 1 

1 1 1 1 1 1 1 1 1 1 1 
1 p p p 0 0 1 0 0 0 1 
1 p 1 p p p 1 0 1 0 1 
e p 1 p p p p p 1 0 1 
1 0 1 1 1 1 1 p 1 0 1 
1 0 1 0 1 p p p 1 0 1 
1 0 0 0 1 p 1 0 0 0 1 
1 1 1 1 1 p 1 0 0 0 1 
1 0 1 b 1 p 1 0 0 0 1 
1 0 0 p p p 1 0 0 0 1 
1 1 1 1 1 1 1 1 1 1 1 

*/
package maze;

import java.util.Scanner;

public class MazeTest 
{
    public static void main(String[] args)
    {
        Scanner input = new Scanner(System.in);
        char[][] g = {{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
                      {'1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '1'},
                      {'1', '0', '1', '0', '0', '0', '1', '0', '1', '0', '1'},
                      {'e', '0', '1', '0', '0', '0', '0', '0', '1', '0', '1'},
                      {'1', '0', '1', '1', '1', '1', '1', '0', '1', '0', '1'},
                      {'1', '0', '1', '0', '1', '0', '0', '0', '1', '0', '1'},
                      {'1', '0', '0', '0', '1', '0', '1', '0', '0', '0', '1'},
                      {'1', '1', '1', '1', '1', '0', '1', '0', '0', '0', '1'},
                      {'1', '0', '1', 'b', '1', '0', '1', '0', '0', '0', '1'},
                      {'1', '0', '0', '0', '0', '0', '1', '0', '0', '0', '1'},
                      {'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'}
                    };
        
        char[][] g2 = {{'1', '1', '1', '1', '1'},
                       {'b', '0', '1', '0', '1'},
                       {'1', '0', '1', '0', 'e'},
                       {'0', '0', '0', '0', '1'},
                       {'1', '1', '1', '1', '1'}
                    };
        System.out.println("Enter number of rows and columns: ");
        int rows = input.nextInt();
        int cols = input.nextInt();
        Maze myMaze = new Maze(rows, cols, g);
        myMaze.solve(8, 3);
        
        //System.out.println(myMaze);
    }
}
